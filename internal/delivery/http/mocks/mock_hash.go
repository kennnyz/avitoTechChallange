// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_http_delivery is a generated GoMock package.
package mock_http_delivery

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	models "www.github.com/kennnyz/avitochallenge/internal/models"
)

// MockUserSegmentService is a mock of UserSegmentService interface.
type MockUserSegmentService struct {
	ctrl     *gomock.Controller
	recorder *MockUserSegmentServiceMockRecorder
}

// MockUserSegmentServiceMockRecorder is the mock recorder for MockUserSegmentService.
type MockUserSegmentServiceMockRecorder struct {
	mock *MockUserSegmentService
}

// NewMockUserSegmentService creates a new mock instance.
func NewMockUserSegmentService(ctrl *gomock.Controller) *MockUserSegmentService {
	mock := &MockUserSegmentService{ctrl: ctrl}
	mock.recorder = &MockUserSegmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSegmentService) EXPECT() *MockUserSegmentServiceMockRecorder {
	return m.recorder
}

// AddUserToSegments mocks base method.
func (m *MockUserSegmentService) AddUserToSegments(ctx context.Context, segments models.AddUserToSegment) (*models.AddUserToSegmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToSegments", ctx, segments)
	ret0, _ := ret[0].(*models.AddUserToSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToSegments indicates an expected call of AddUserToSegments.
func (mr *MockUserSegmentServiceMockRecorder) AddUserToSegments(ctx, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToSegments", reflect.TypeOf((*MockUserSegmentService)(nil).AddUserToSegments), ctx, segments)
}

// CreateSegment mocks base method.
func (m *MockUserSegmentService) CreateSegment(ctx context.Context, segmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", ctx, segmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockUserSegmentServiceMockRecorder) CreateSegment(ctx, segmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockUserSegmentService)(nil).CreateSegment), ctx, segmentName)
}

// DeleteSegment mocks base method.
func (m *MockUserSegmentService) DeleteSegment(ctx context.Context, segmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", ctx, segmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockUserSegmentServiceMockRecorder) DeleteSegment(ctx, segmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockUserSegmentService)(nil).DeleteSegment), ctx, segmentName)
}

// GetActiveUserSegments mocks base method.
func (m *MockUserSegmentService) GetActiveUserSegments(ctx context.Context, userID int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUserSegments", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveUserSegments indicates an expected call of GetActiveUserSegments.
func (mr *MockUserSegmentServiceMockRecorder) GetActiveUserSegments(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUserSegments", reflect.TypeOf((*MockUserSegmentService)(nil).GetActiveUserSegments), ctx, userID)
}

// GetHistoryFile mocks base method.
func (m *MockUserSegmentService) GetHistoryFile(ctx context.Context, year, month string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryFile", ctx, year, month)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryFile indicates an expected call of GetHistoryFile.
func (mr *MockUserSegmentServiceMockRecorder) GetHistoryFile(ctx, year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryFile", reflect.TypeOf((*MockUserSegmentService)(nil).GetHistoryFile), ctx, year, month)
}
